%clearfix {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}
@mixin text-truncate(){
  @extend %clearfix;
}

%text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
@mixin text-truncate(){
  @extend %text-truncate;
}

@function number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers: 0 1 2 3 4 5 6 7 8 9;

  // Result
  $result: 0;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if not $index {
      @warn "Unknown character `#{$character}`.";
      @return false;
    }

    $number: nth($numbers, $index);
    $result: $result * 10 + $number;
  }

  @return $result;
}

@function str-split($string, $separator) {
  $i: str-index($string, $separator);
  @if $i != null {
    @return append(
      str-slice($string, 1, $i - 1),
      str-split(str-slice($string, $i + str-length($separator)), $separator)
    );
  }
  @return $string;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      $value: nth($args, $i + 1);
      @if(unit($value) == "px"){
        #{$o}: rem(strip-unit($value));
      }
      @else {
        #{$o}: $value;
      }
    }
  }
  position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}

@mixin size($width: null, $height: null) {
  @if(unit($width) == "px"){
    width : rem(strip-unit($width));
  }
  @else {
    width: $width;
  }
  @if(unit($height) == "px"){
    height : rem(strip-unit($height));
  }
  @else {
    height: $height;
  }
}

@mixin first($nb) {
  &:nth-child(-n + #{$nb}) {
    @content;
  }
}
@mixin last($nb) {
  &:nth-last-child(-n + #{$nb}) {
    @content;
  }
}
@mixin from($nb) {
  &:nth-child(n+ #{$nb}){
    @content;
  }
}
@mixin from-end($nb) {
  &:nth-last-child(#{$nb}){
    @content;
  }
}
@mixin each($nb) {
  &:nth-child(#{$nb}n){
    @content;
  }
}
@mixin between($first, $last) {
  &:nth-child(#{$first}+3):nth-child(-n+#{$last}){
    @content;
  }
}

@mixin margin($args) {

  $values : true;

  @each $o in $args {
    @if type-of($o) == string and $o != "auto" {
      $values: false;
    }
  }

  @if $values {
    margin: $args;
  }
  @else{
    @each $o in top right bottom left {
      $i: index($args, $o);
      @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
        $value: nth($args, $i + 1);
        @if(unit($value) == "px"){
          margin-#{$o}: rem(strip-unit($value));
        }
        @else {
          margin-#{$o}: $value;
        }
      }
    }
  }

}

@mixin padding($args) {

  $values : true;

  @each $o in $args {
    @if type-of($o) == string and $o != "inherit" {
      $values: false;
    }
  }

  @if $values {
    padding: $args;
  }
  @else{
    @each $o in top right bottom left {
      $i: index($args, $o);
      @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
        $value: nth($args, $i + 1);
        @if(unit($value) == "px"){
          padding-#{$o}: rem(strip-unit($value));
        }
        @else {
          padding-#{$o}: $value;
        }
      }
    }
  }

}

@function nth-safe($list, $key, $default) {
  @return if($key <= length($list), nth($list, $key), $default);
}

@mixin calcOffset($direction, $args, $offset: 300){

  $breakpoints: map-keys($grid-breakpoints);

  @each $o in map-keys($grid-breakpoints) {

      $i: index($args, $o);

      @if $i and type-of(nth($args, $i + 1)) == number {

          $breakpoint: $o;
          $nbColumns: nth($args, $i + 1);

          $container-width: map-get($container-max-widths, $breakpoint);

          @include breakpoint(#{$o}) {
            @if ($direction == 'left') {
                @if ($o == 'xs' or $o == 'xsm' or $o == 'sm'){
                    width: calc((#{$nbColumns} * (#{$container-width} - #{$grid-gutter-width}) / 12) + #{$offset}px);
                    right: calc((100% - (#{$container-width} - #{$grid-gutter-width} / 2)) / 2 + ((12 - #{$nbColumns}) * #{$container-width} / 12));
                }
                @else{
                    width: calc((#{$nbColumns} * #{$container-width} / 12) + #{$offset}px);
                    right: calc((100% - #{$container-width}) / 2 + ((12 - #{$nbColumns}) * #{$container-width} / 12));
                }
            }
            @if ($direction == 'right') {
                @if ($o == 'xs' or $o == 'xsm' or $o == 'sm'){
                    @debug $o;
                    width: calc((#{$nbColumns} * (#{$container-width} - #{$grid-gutter-width}) / 12) + #{$offset}px);
                    left: calc((100% - (#{$container-width} - #{$grid-gutter-width} / 2)) / 2 + ((12 - #{$nbColumns}) * #{$container-width} / 12));
                }
                @else{
                    width: calc((#{$nbColumns} * #{$container-width} / 12) + #{$offset}px);
                    left: calc((100% - #{$container-width}) / 2 + ((12 - #{$nbColumns}) * #{$container-width} / 12));
                }
            }
        }

          $nextbreakpoint: breakpoint-next($o);

          @if($nextbreakpoint){

              $nextArgs: nth-safe($args, $i + 2, null);

              @if($nextbreakpoint != $nextArgs) {
                  @include calcOffset($direction, $nextbreakpoint $nbColumns, $offset);
              }

          }

      }

  }

}

@mixin offsetcontainer($direction, $args, $offset: 300){
  $minbreakpoint: nth($args, 1);
  @include breakpoint($minbreakpoint) {
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
  }
  @include calcOffset($direction, $args, $offset);
}